// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pollAppNew/ent/poll"
	"pollAppNew/ent/polloption"
	"pollAppNew/ent/predicate"
	"pollAppNew/ent/user"
	"pollAppNew/ent/vote"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteUpdate is the builder for updating Vote entities.
type VoteUpdate struct {
	config
	hooks    []Hook
	mutation *VoteMutation
}

// Where appends a list predicates to the VoteUpdate builder.
func (vu *VoteUpdate) Where(ps ...predicate.Vote) *VoteUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUserID sets the "user_id" field.
func (vu *VoteUpdate) SetUserID(i int) *VoteUpdate {
	vu.mutation.SetUserID(i)
	return vu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vu *VoteUpdate) SetNillableUserID(i *int) *VoteUpdate {
	if i != nil {
		vu.SetUserID(*i)
	}
	return vu
}

// SetPollID sets the "poll_id" field.
func (vu *VoteUpdate) SetPollID(i int) *VoteUpdate {
	vu.mutation.SetPollID(i)
	return vu
}

// SetNillablePollID sets the "poll_id" field if the given value is not nil.
func (vu *VoteUpdate) SetNillablePollID(i *int) *VoteUpdate {
	if i != nil {
		vu.SetPollID(*i)
	}
	return vu
}

// SetOptionID sets the "option_id" field.
func (vu *VoteUpdate) SetOptionID(i int) *VoteUpdate {
	vu.mutation.SetOptionID(i)
	return vu
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (vu *VoteUpdate) SetNillableOptionID(i *int) *VoteUpdate {
	if i != nil {
		vu.SetOptionID(*i)
	}
	return vu
}

// SetUser sets the "user" edge to the User entity.
func (vu *VoteUpdate) SetUser(u *User) *VoteUpdate {
	return vu.SetUserID(u.ID)
}

// SetPoll sets the "poll" edge to the Poll entity.
func (vu *VoteUpdate) SetPoll(p *Poll) *VoteUpdate {
	return vu.SetPollID(p.ID)
}

// SetOption sets the "option" edge to the PollOption entity.
func (vu *VoteUpdate) SetOption(p *PollOption) *VoteUpdate {
	return vu.SetOptionID(p.ID)
}

// Mutation returns the VoteMutation object of the builder.
func (vu *VoteUpdate) Mutation() *VoteMutation {
	return vu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vu *VoteUpdate) ClearUser() *VoteUpdate {
	vu.mutation.ClearUser()
	return vu
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (vu *VoteUpdate) ClearPoll() *VoteUpdate {
	vu.mutation.ClearPoll()
	return vu
}

// ClearOption clears the "option" edge to the PollOption entity.
func (vu *VoteUpdate) ClearOption() *VoteUpdate {
	vu.mutation.ClearOption()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VoteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VoteUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VoteUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VoteUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VoteUpdate) check() error {
	if vu.mutation.UserCleared() && len(vu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.user"`)
	}
	if vu.mutation.PollCleared() && len(vu.mutation.PollIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.poll"`)
	}
	if vu.mutation.OptionCleared() && len(vu.mutation.OptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.option"`)
	}
	return nil
}

func (vu *VoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vote.Table, vote.Columns, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.UserTable,
			Columns: []string{vote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.UserTable,
			Columns: []string{vote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.OptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.OptionTable,
			Columns: []string{vote.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.OptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.OptionTable,
			Columns: []string{vote.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VoteUpdateOne is the builder for updating a single Vote entity.
type VoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoteMutation
}

// SetUserID sets the "user_id" field.
func (vuo *VoteUpdateOne) SetUserID(i int) *VoteUpdateOne {
	vuo.mutation.SetUserID(i)
	return vuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillableUserID(i *int) *VoteUpdateOne {
	if i != nil {
		vuo.SetUserID(*i)
	}
	return vuo
}

// SetPollID sets the "poll_id" field.
func (vuo *VoteUpdateOne) SetPollID(i int) *VoteUpdateOne {
	vuo.mutation.SetPollID(i)
	return vuo
}

// SetNillablePollID sets the "poll_id" field if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillablePollID(i *int) *VoteUpdateOne {
	if i != nil {
		vuo.SetPollID(*i)
	}
	return vuo
}

// SetOptionID sets the "option_id" field.
func (vuo *VoteUpdateOne) SetOptionID(i int) *VoteUpdateOne {
	vuo.mutation.SetOptionID(i)
	return vuo
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillableOptionID(i *int) *VoteUpdateOne {
	if i != nil {
		vuo.SetOptionID(*i)
	}
	return vuo
}

// SetUser sets the "user" edge to the User entity.
func (vuo *VoteUpdateOne) SetUser(u *User) *VoteUpdateOne {
	return vuo.SetUserID(u.ID)
}

// SetPoll sets the "poll" edge to the Poll entity.
func (vuo *VoteUpdateOne) SetPoll(p *Poll) *VoteUpdateOne {
	return vuo.SetPollID(p.ID)
}

// SetOption sets the "option" edge to the PollOption entity.
func (vuo *VoteUpdateOne) SetOption(p *PollOption) *VoteUpdateOne {
	return vuo.SetOptionID(p.ID)
}

// Mutation returns the VoteMutation object of the builder.
func (vuo *VoteUpdateOne) Mutation() *VoteMutation {
	return vuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vuo *VoteUpdateOne) ClearUser() *VoteUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (vuo *VoteUpdateOne) ClearPoll() *VoteUpdateOne {
	vuo.mutation.ClearPoll()
	return vuo
}

// ClearOption clears the "option" edge to the PollOption entity.
func (vuo *VoteUpdateOne) ClearOption() *VoteUpdateOne {
	vuo.mutation.ClearOption()
	return vuo
}

// Where appends a list predicates to the VoteUpdate builder.
func (vuo *VoteUpdateOne) Where(ps ...predicate.Vote) *VoteUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VoteUpdateOne) Select(field string, fields ...string) *VoteUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vote entity.
func (vuo *VoteUpdateOne) Save(ctx context.Context) (*Vote, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VoteUpdateOne) SaveX(ctx context.Context) *Vote {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VoteUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VoteUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VoteUpdateOne) check() error {
	if vuo.mutation.UserCleared() && len(vuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.user"`)
	}
	if vuo.mutation.PollCleared() && len(vuo.mutation.PollIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.poll"`)
	}
	if vuo.mutation.OptionCleared() && len(vuo.mutation.OptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.option"`)
	}
	return nil
}

func (vuo *VoteUpdateOne) sqlSave(ctx context.Context) (_node *Vote, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vote.Table, vote.Columns, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vote.FieldID)
		for _, f := range fields {
			if !vote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.UserTable,
			Columns: []string{vote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.UserTable,
			Columns: []string{vote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.OptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.OptionTable,
			Columns: []string{vote.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.OptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.OptionTable,
			Columns: []string{vote.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vote{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
