// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"pollAppNew/ent/poll"
	"pollAppNew/ent/polloption"
	"pollAppNew/ent/user"
	"pollAppNew/ent/vote"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Vote is the model entity for the Vote schema.
type Vote struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// PollID holds the value of the "poll_id" field.
	PollID int `json:"poll_id,omitempty"`
	// OptionID holds the value of the "option_id" field.
	OptionID int `json:"option_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VoteQuery when eager-loading is set.
	Edges        VoteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VoteEdges holds the relations/edges for other nodes in the graph.
type VoteEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Poll holds the value of the poll edge.
	Poll *Poll `json:"poll,omitempty"`
	// Option holds the value of the option edge.
	Option *PollOption `json:"option,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VoteEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PollOrErr returns the Poll value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VoteEdges) PollOrErr() (*Poll, error) {
	if e.Poll != nil {
		return e.Poll, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: poll.Label}
	}
	return nil, &NotLoadedError{edge: "poll"}
}

// OptionOrErr returns the Option value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VoteEdges) OptionOrErr() (*PollOption, error) {
	if e.Option != nil {
		return e.Option, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: polloption.Label}
	}
	return nil, &NotLoadedError{edge: "option"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vote) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vote.FieldID, vote.FieldUserID, vote.FieldPollID, vote.FieldOptionID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vote fields.
func (v *Vote) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vote.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vote.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				v.UserID = int(value.Int64)
			}
		case vote.FieldPollID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field poll_id", values[i])
			} else if value.Valid {
				v.PollID = int(value.Int64)
			}
		case vote.FieldOptionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field option_id", values[i])
			} else if value.Valid {
				v.OptionID = int(value.Int64)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vote.
// This includes values selected through modifiers, order, etc.
func (v *Vote) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Vote entity.
func (v *Vote) QueryUser() *UserQuery {
	return NewVoteClient(v.config).QueryUser(v)
}

// QueryPoll queries the "poll" edge of the Vote entity.
func (v *Vote) QueryPoll() *PollQuery {
	return NewVoteClient(v.config).QueryPoll(v)
}

// QueryOption queries the "option" edge of the Vote entity.
func (v *Vote) QueryOption() *PollOptionQuery {
	return NewVoteClient(v.config).QueryOption(v)
}

// Update returns a builder for updating this Vote.
// Note that you need to call Vote.Unwrap() before calling this method if this Vote
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vote) Update() *VoteUpdateOne {
	return NewVoteClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vote entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vote) Unwrap() *Vote {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vote is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vote) String() string {
	var builder strings.Builder
	builder.WriteString("Vote(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", v.UserID))
	builder.WriteString(", ")
	builder.WriteString("poll_id=")
	builder.WriteString(fmt.Sprintf("%v", v.PollID))
	builder.WriteString(", ")
	builder.WriteString("option_id=")
	builder.WriteString(fmt.Sprintf("%v", v.OptionID))
	builder.WriteByte(')')
	return builder.String()
}

// Votes is a parsable slice of Vote.
type Votes []*Vote
