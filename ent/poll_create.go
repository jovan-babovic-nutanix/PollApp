// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pollAppNew/ent/poll"
	"pollAppNew/ent/polloption"
	"pollAppNew/ent/user"
	"pollAppNew/ent/vote"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PollCreate is the builder for creating a Poll entity.
type PollCreate struct {
	config
	mutation *PollMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (pc *PollCreate) SetTitle(s string) *PollCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetCreatorID sets the "creator_id" field.
func (pc *PollCreate) SetCreatorID(i int) *PollCreate {
	pc.mutation.SetCreatorID(i)
	return pc
}

// SetCreator sets the "creator" edge to the User entity.
func (pc *PollCreate) SetCreator(u *User) *PollCreate {
	return pc.SetCreatorID(u.ID)
}

// AddOptionIDs adds the "options" edge to the PollOption entity by IDs.
func (pc *PollCreate) AddOptionIDs(ids ...int) *PollCreate {
	pc.mutation.AddOptionIDs(ids...)
	return pc
}

// AddOptions adds the "options" edges to the PollOption entity.
func (pc *PollCreate) AddOptions(p ...*PollOption) *PollCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddOptionIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (pc *PollCreate) AddVoteIDs(ids ...int) *PollCreate {
	pc.mutation.AddVoteIDs(ids...)
	return pc
}

// AddVotes adds the "votes" edges to the Vote entity.
func (pc *PollCreate) AddVotes(v ...*Vote) *PollCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pc.AddVoteIDs(ids...)
}

// Mutation returns the PollMutation object of the builder.
func (pc *PollCreate) Mutation() *PollMutation {
	return pc.mutation
}

// Save creates the Poll in the database.
func (pc *PollCreate) Save(ctx context.Context) (*Poll, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PollCreate) SaveX(ctx context.Context) *Poll {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PollCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PollCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PollCreate) check() error {
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Poll.title"`)}
	}
	if v, ok := pc.mutation.Title(); ok {
		if err := poll.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Poll.title": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "Poll.creator_id"`)}
	}
	if len(pc.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "Poll.creator"`)}
	}
	return nil
}

func (pc *PollCreate) sqlSave(ctx context.Context) (*Poll, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PollCreate) createSpec() (*Poll, *sqlgraph.CreateSpec) {
	var (
		_node = &Poll{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(poll.Table, sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(poll.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if nodes := pc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poll.CreatorTable,
			Columns: []string{poll.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.OptionsTable,
			Columns: []string{poll.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PollCreateBulk is the builder for creating many Poll entities in bulk.
type PollCreateBulk struct {
	config
	err      error
	builders []*PollCreate
}

// Save creates the Poll entities in the database.
func (pcb *PollCreateBulk) Save(ctx context.Context) ([]*Poll, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Poll, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PollMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PollCreateBulk) SaveX(ctx context.Context) []*Poll {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PollCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PollCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
