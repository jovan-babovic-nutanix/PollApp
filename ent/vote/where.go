// Code generated by ent, DO NOT EDIT.

package vote

import (
	"pollAppNew/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vote {
	return predicate.Vote(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vote {
	return predicate.Vote(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vote {
	return predicate.Vote(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vote {
	return predicate.Vote(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldUserID, v))
}

// PollID applies equality check predicate on the "poll_id" field. It's identical to PollIDEQ.
func PollID(v int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldPollID, v))
}

// OptionID applies equality check predicate on the "option_id" field. It's identical to OptionIDEQ.
func OptionID(v int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldOptionID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldUserID, vs...))
}

// PollIDEQ applies the EQ predicate on the "poll_id" field.
func PollIDEQ(v int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldPollID, v))
}

// PollIDNEQ applies the NEQ predicate on the "poll_id" field.
func PollIDNEQ(v int) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldPollID, v))
}

// PollIDIn applies the In predicate on the "poll_id" field.
func PollIDIn(vs ...int) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldPollID, vs...))
}

// PollIDNotIn applies the NotIn predicate on the "poll_id" field.
func PollIDNotIn(vs ...int) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldPollID, vs...))
}

// OptionIDEQ applies the EQ predicate on the "option_id" field.
func OptionIDEQ(v int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldOptionID, v))
}

// OptionIDNEQ applies the NEQ predicate on the "option_id" field.
func OptionIDNEQ(v int) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldOptionID, v))
}

// OptionIDIn applies the In predicate on the "option_id" field.
func OptionIDIn(vs ...int) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldOptionID, vs...))
}

// OptionIDNotIn applies the NotIn predicate on the "option_id" field.
func OptionIDNotIn(vs ...int) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldOptionID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPoll applies the HasEdge predicate on the "poll" edge.
func HasPoll() predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PollTable, PollColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPollWith applies the HasEdge predicate on the "poll" edge with a given conditions (other predicates).
func HasPollWith(preds ...predicate.Poll) predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := newPollStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOption applies the HasEdge predicate on the "option" edge.
func HasOption() predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OptionTable, OptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOptionWith applies the HasEdge predicate on the "option" edge with a given conditions (other predicates).
func HasOptionWith(preds ...predicate.PollOption) predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := newOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.NotPredicates(p))
}
