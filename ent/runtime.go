// Code generated by ent, DO NOT EDIT.

package ent

import (
	"pollAppNew/ent/poll"
	"pollAppNew/ent/polloption"
	"pollAppNew/ent/schema"
	"pollAppNew/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	pollFields := schema.Poll{}.Fields()
	_ = pollFields
	// pollDescTitle is the schema descriptor for title field.
	pollDescTitle := pollFields[0].Descriptor()
	// poll.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	poll.TitleValidator = pollDescTitle.Validators[0].(func(string) error)
	polloptionFields := schema.PollOption{}.Fields()
	_ = polloptionFields
	// polloptionDescText is the schema descriptor for text field.
	polloptionDescText := polloptionFields[0].Descriptor()
	// polloption.TextValidator is a validator for the "text" field. It is called by the builders before save.
	polloption.TextValidator = polloptionDescText.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[1].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = userDescPasswordHash.Validators[0].(func(string) error)
}
