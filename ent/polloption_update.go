// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pollAppNew/ent/poll"
	"pollAppNew/ent/polloption"
	"pollAppNew/ent/predicate"
	"pollAppNew/ent/vote"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PollOptionUpdate is the builder for updating PollOption entities.
type PollOptionUpdate struct {
	config
	hooks    []Hook
	mutation *PollOptionMutation
}

// Where appends a list predicates to the PollOptionUpdate builder.
func (pou *PollOptionUpdate) Where(ps ...predicate.PollOption) *PollOptionUpdate {
	pou.mutation.Where(ps...)
	return pou
}

// SetText sets the "text" field.
func (pou *PollOptionUpdate) SetText(s string) *PollOptionUpdate {
	pou.mutation.SetText(s)
	return pou
}

// SetNillableText sets the "text" field if the given value is not nil.
func (pou *PollOptionUpdate) SetNillableText(s *string) *PollOptionUpdate {
	if s != nil {
		pou.SetText(*s)
	}
	return pou
}

// SetPollID sets the "poll_id" field.
func (pou *PollOptionUpdate) SetPollID(i int) *PollOptionUpdate {
	pou.mutation.SetPollID(i)
	return pou
}

// SetNillablePollID sets the "poll_id" field if the given value is not nil.
func (pou *PollOptionUpdate) SetNillablePollID(i *int) *PollOptionUpdate {
	if i != nil {
		pou.SetPollID(*i)
	}
	return pou
}

// SetPoll sets the "poll" edge to the Poll entity.
func (pou *PollOptionUpdate) SetPoll(p *Poll) *PollOptionUpdate {
	return pou.SetPollID(p.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (pou *PollOptionUpdate) AddVoteIDs(ids ...int) *PollOptionUpdate {
	pou.mutation.AddVoteIDs(ids...)
	return pou
}

// AddVotes adds the "votes" edges to the Vote entity.
func (pou *PollOptionUpdate) AddVotes(v ...*Vote) *PollOptionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pou.AddVoteIDs(ids...)
}

// Mutation returns the PollOptionMutation object of the builder.
func (pou *PollOptionUpdate) Mutation() *PollOptionMutation {
	return pou.mutation
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (pou *PollOptionUpdate) ClearPoll() *PollOptionUpdate {
	pou.mutation.ClearPoll()
	return pou
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (pou *PollOptionUpdate) ClearVotes() *PollOptionUpdate {
	pou.mutation.ClearVotes()
	return pou
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (pou *PollOptionUpdate) RemoveVoteIDs(ids ...int) *PollOptionUpdate {
	pou.mutation.RemoveVoteIDs(ids...)
	return pou
}

// RemoveVotes removes "votes" edges to Vote entities.
func (pou *PollOptionUpdate) RemoveVotes(v ...*Vote) *PollOptionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pou.RemoveVoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pou *PollOptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pou.sqlSave, pou.mutation, pou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pou *PollOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := pou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pou *PollOptionUpdate) Exec(ctx context.Context) error {
	_, err := pou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pou *PollOptionUpdate) ExecX(ctx context.Context) {
	if err := pou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pou *PollOptionUpdate) check() error {
	if v, ok := pou.mutation.Text(); ok {
		if err := polloption.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "PollOption.text": %w`, err)}
		}
	}
	if pou.mutation.PollCleared() && len(pou.mutation.PollIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PollOption.poll"`)
	}
	return nil
}

func (pou *PollOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(polloption.Table, polloption.Columns, sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt))
	if ps := pou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pou.mutation.Text(); ok {
		_spec.SetField(polloption.FieldText, field.TypeString, value)
	}
	if pou.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   polloption.PollTable,
			Columns: []string{polloption.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   polloption.PollTable,
			Columns: []string{polloption.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pou.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.RemovedVotesIDs(); len(nodes) > 0 && !pou.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{polloption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pou.mutation.done = true
	return n, nil
}

// PollOptionUpdateOne is the builder for updating a single PollOption entity.
type PollOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PollOptionMutation
}

// SetText sets the "text" field.
func (pouo *PollOptionUpdateOne) SetText(s string) *PollOptionUpdateOne {
	pouo.mutation.SetText(s)
	return pouo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (pouo *PollOptionUpdateOne) SetNillableText(s *string) *PollOptionUpdateOne {
	if s != nil {
		pouo.SetText(*s)
	}
	return pouo
}

// SetPollID sets the "poll_id" field.
func (pouo *PollOptionUpdateOne) SetPollID(i int) *PollOptionUpdateOne {
	pouo.mutation.SetPollID(i)
	return pouo
}

// SetNillablePollID sets the "poll_id" field if the given value is not nil.
func (pouo *PollOptionUpdateOne) SetNillablePollID(i *int) *PollOptionUpdateOne {
	if i != nil {
		pouo.SetPollID(*i)
	}
	return pouo
}

// SetPoll sets the "poll" edge to the Poll entity.
func (pouo *PollOptionUpdateOne) SetPoll(p *Poll) *PollOptionUpdateOne {
	return pouo.SetPollID(p.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (pouo *PollOptionUpdateOne) AddVoteIDs(ids ...int) *PollOptionUpdateOne {
	pouo.mutation.AddVoteIDs(ids...)
	return pouo
}

// AddVotes adds the "votes" edges to the Vote entity.
func (pouo *PollOptionUpdateOne) AddVotes(v ...*Vote) *PollOptionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pouo.AddVoteIDs(ids...)
}

// Mutation returns the PollOptionMutation object of the builder.
func (pouo *PollOptionUpdateOne) Mutation() *PollOptionMutation {
	return pouo.mutation
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (pouo *PollOptionUpdateOne) ClearPoll() *PollOptionUpdateOne {
	pouo.mutation.ClearPoll()
	return pouo
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (pouo *PollOptionUpdateOne) ClearVotes() *PollOptionUpdateOne {
	pouo.mutation.ClearVotes()
	return pouo
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (pouo *PollOptionUpdateOne) RemoveVoteIDs(ids ...int) *PollOptionUpdateOne {
	pouo.mutation.RemoveVoteIDs(ids...)
	return pouo
}

// RemoveVotes removes "votes" edges to Vote entities.
func (pouo *PollOptionUpdateOne) RemoveVotes(v ...*Vote) *PollOptionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pouo.RemoveVoteIDs(ids...)
}

// Where appends a list predicates to the PollOptionUpdate builder.
func (pouo *PollOptionUpdateOne) Where(ps ...predicate.PollOption) *PollOptionUpdateOne {
	pouo.mutation.Where(ps...)
	return pouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pouo *PollOptionUpdateOne) Select(field string, fields ...string) *PollOptionUpdateOne {
	pouo.fields = append([]string{field}, fields...)
	return pouo
}

// Save executes the query and returns the updated PollOption entity.
func (pouo *PollOptionUpdateOne) Save(ctx context.Context) (*PollOption, error) {
	return withHooks(ctx, pouo.sqlSave, pouo.mutation, pouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pouo *PollOptionUpdateOne) SaveX(ctx context.Context) *PollOption {
	node, err := pouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pouo *PollOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := pouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pouo *PollOptionUpdateOne) ExecX(ctx context.Context) {
	if err := pouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pouo *PollOptionUpdateOne) check() error {
	if v, ok := pouo.mutation.Text(); ok {
		if err := polloption.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "PollOption.text": %w`, err)}
		}
	}
	if pouo.mutation.PollCleared() && len(pouo.mutation.PollIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PollOption.poll"`)
	}
	return nil
}

func (pouo *PollOptionUpdateOne) sqlSave(ctx context.Context) (_node *PollOption, err error) {
	if err := pouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(polloption.Table, polloption.Columns, sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt))
	id, ok := pouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PollOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, polloption.FieldID)
		for _, f := range fields {
			if !polloption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != polloption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pouo.mutation.Text(); ok {
		_spec.SetField(polloption.FieldText, field.TypeString, value)
	}
	if pouo.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   polloption.PollTable,
			Columns: []string{polloption.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   polloption.PollTable,
			Columns: []string{polloption.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pouo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.RemovedVotesIDs(); len(nodes) > 0 && !pouo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PollOption{config: pouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{polloption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pouo.mutation.done = true
	return _node, nil
}
